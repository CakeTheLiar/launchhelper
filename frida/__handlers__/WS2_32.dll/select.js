/*
 * Auto-generated by Frida. Please modify to match the signature of select.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call select.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    this.size = Process.pointerSize

    this.timeout_orig = { 'sec': args[4].readInt(), 'usec': args[4].add(this.size).readInt() }

    if(this.timeout_orig.sec != 0) {
      args[4].writeInt(0)
      //args[4].add(this.size).writeInt(0)
    }

    log(`select(nfds=${args[0]}, readfds=${args[1]}, writefds=${args[2]}, exceptfds=${args[3]}, timeout=${args[4]})`);

    this.fdsc = {'readfds': 0, 'writefds': 0, 'exceptfds': 0}
    if(args[1] != 0x0) this.fdsc.readfds = args[1].readUInt()
    if(args[2] != 0x0) this.fdsc.writefds = args[2].readUInt()
    if(args[3] != 0x0) this.fdsc.exceptfds = args[3].readUInt() 
    log(`readfds=${this.fdsc.readfds}, writefds=${this.fdsc.writefds}, exceptfds=${this.fdsc.exceptfds}`)
    log(`timeout_orig: ${this.timeout_orig.sec}sec ${this.timeout_orig.usec}usec`);

    /*if(this.timeout_orig.sec != 0) {
      log(Thread.backtrace(this.context, Backtracer.FUZZY)
        .map(DebugSymbol.fromAddress).join('\n') + '\n')
    }*/
  },

  /**
   * Called synchronously when about to return from select.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
    log(`returned ${retval}`)
  }
}
